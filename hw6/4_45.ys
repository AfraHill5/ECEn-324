# Execution begins at address 0
        .pos 0
init:   irmovl Stack,%esp     # Set up stack pointer
        irmovl Stack,%ebp     # Set up base pointer
        jmp Main              # Execute main program

# Array of 7 elements
        .align 4
array:  .long 0xdddd          # These values should get sorted
        .long 0xeeee
        .long 0xbbbb
        .long 0xaaaa
        .long 0xffff
        .long 0xcccc
        .long 0x0101          # This value should not change

Main:   irmovl $6,%eax
        pushl %eax            # push array size 
        irmovl array,%edx
        pushl %edx            # push array address
        call Bubble           # Bubble(array,6)
        halt

# void Bubble(int *data, int count)
Bubble:
        pushl	%ebp
        rrmovl	%esp, %ebp
        pushl	%esi
        rrmovl	12(%ebp), %esi
        pushl	%ebx
        rrmovl	8(%ebp), %edx
        subl	$1, %esi
        testl	%esi, %esi
        jle	.L17

.L12:
        xorl	%eax, %eax
        testl	%esi, %esi
        jle	.L16

.L18:
        rrmovl	(%edx,%eax,4), %ecx
        rrmovl	4(%edx,%eax,4), %ebx
        cmpl	%ebx, %ecx
        jle	.L13
        rrmovl	%ebx, (%edx,%eax,4)
        rrmovl	%ecx, 4(%edx,%eax,4)
.L13:
        addl	$1, %eax
        cmpl	%eax, %esi
        jne	.L18
.L16:
        subl	$1, %esi
        jne	.L12
.L17:
        popl	%ebx
        popl	%esi
        popl	%ebp

        ret                   # and ends with a ret instruction

        .pos 0x100
Stack:                        # Stack goes here, grows down
