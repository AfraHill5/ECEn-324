                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 308488030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 308588030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 308004000000 | 	irmovl 4, %eax		# src and dst have 4 elements
  0x012: a008         | 	pushl %eax
  0x014: 308060020000 | 	irmovl dest, %eax	# dst array
  0x01a: a008         | 	pushl %eax
  0x01c: 308054010000 | 	irmovl src, %eax	# src array
  0x022: a008         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 10           | 	halt			# should halt with num nonzeros in %eax
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a058         | ncopy:  pushl %ebp    # Save old frame pointer
  0x02c: 2045         |   rrmovl %esp,%ebp  # Set up new frame pointer
  0x02e: a068         |   pushl %esi    # Save callee-save regs
  0x030: a038         |   pushl %ebx
  0x032: a078         |   pushl %edi
  0x034: 503508000000 |   mrmovl 8(%ebp),%ebx  # src
  0x03a: 502510000000 |   mrmovl 16(%ebp),%edx  # len
  0x040: 50150c000000 |   mrmovl 12(%ebp),%ecx  # dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      |   # Loop header
  0x046: 6300         |   xorl %eax,%eax    # count = 0;
  0x048: 6222         |   andl %edx, %edx
  0x04a: 7147010000   |   jle Done
  0x04f: c082fcffffff |   iaddl $-4, %edx       # len = len - 4 
  0x055: 72d5000000   |   jl endElems
                      | 
  0x05a:              | unRolledLoop:  
  0x05a: 506300000000 |   mrmovl (%ebx), %esi     # read val from src[0] or multiple
  0x060: 507304000000 |   mrmovl 4(%ebx), %edi   # read val from src[1] or multiple
  0x066: 406100000000 |   rmmovl %esi, (%ecx)     # store src[0] to dest[0] or multiple
  0x06c: 6266         |   andl %esi, %esi       # check src[0] > 0 
  0x06e: 7179000000   |   jle Npos1         # if so, goto Npos1:
  0x073: c08001000000 |   iaddl $1, %eax       # count++
                      | 
  0x079:              | Npos1:
  0x079: 407104000000 |   rmmovl %edi, 4(%ecx)    #store src[1] in dest[1] or multiple
  0x07f: 6277         |   andl %edi, %edi        #check src[1] > 0 
  0x081: 718c000000   |   jle Npos2          #if not get the next element
  0x086: c08001000000 |   iaddl $1, %eax        #count++
                      |   
  0x08c:              | Npos2:
  0x08c: 506308000000 |   mrmovl 8(%ebx), %esi    #read val from src[2] or multiple
  0x092: 50730c000000 |   mrmovl 12(%ebx), %edi    #read val from src[3] or multiple
  0x098: 406108000000 |   rmmovl %esi, 8(%ecx)    #store val from src[2] in dest[2] or multiple
  0x09e: 6266         |   andl %esi, %esi        #check src[2] > 0 
  0x0a0: 71ab000000   |   jle Npos3          #if not get the next element
  0x0a5: c08001000000 |   iaddl $1, %eax        #count++
                      |   
  0x0ab:              | Npos3:
  0x0ab: 40710c000000 |   rmmovl %edi, 12(%ecx)  #store val froms src[3] in dest[3] or multiple
  0x0b1: 6277         |   andl %edi, %edi      #check src[3] > 0 
  0x0b3: 71be000000   |   jle Check        #if not get the next element
  0x0b8: c08001000000 |   iaddl $1, %eax      #count++
                      | 
  0x0be:              | Check: 
  0x0be: c08310000000 |   iaddl $16 , %ebx    #get to the next four positions of src
  0x0c4: c08110000000 |   iaddl $16 , %ecx     #get to the next four positions of dest
  0x0ca: c082fcffffff |   iaddl $-4, %edx      # len = len - 4
  0x0d0: 755a000000   |   jge unRolledLoop    #if there is still 4|count loop again
                      | 
  0x0d5:              | endElems:
  0x0d5: c08204000000 |   iaddl $4, %edx       #add 4 back to get the actual len  
                      |   
  0x0db:              | Rest1:
  0x0db: c082ffffffff |   iaddl $-1 , %edx
  0x0e1: 7247010000   |   jl Done          #short circuit
  0x0e6: 506300000000 |   mrmovl (%ebx), %esi    # read val from src...
  0x0ec: 507304000000 |   mrmovl 4(%ebx), %edi  # read val from src...
  0x0f2: 406100000000 |   rmmovl %esi, (%ecx)
  0x0f8: 6266         |   andl %esi, %esi
  0x0fa: 7105010000   |   jle Rest2
  0x0ff: c08001000000 |   iaddl $1, %eax
                      |   
  0x105:              | Rest2:
  0x105: c082ffffffff |   iaddl $-1 , %edx
  0x10b: 7247010000   |   jl Done  
  0x110: 407104000000 |   rmmovl %edi, 4(%ecx)
  0x116: 6277         |   andl %edi, %edi
  0x118: 7123010000   |   jle Rest3
  0x11d: c08001000000 |   iaddl $1, %eax
                      | 
  0x123:              | Rest3:
  0x123: c082ffffffff |   iaddl $-1 , %edx
  0x129: 7247010000   |   jl Done
  0x12e: 506308000000 |   mrmovl 8(%ebx), %esi  # read val from src...
  0x134: 406108000000 |   rmmovl %esi, 8(%ecx)
  0x13a: 6266         |   andl %esi, %esi
  0x13c: 7147010000   |   jle Done
  0x141: c08001000000 |   iaddl $1, %eax  
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x147:              | Done:
  0x147: b078         |   popl %edi               # Restore callee-save registers
  0x149: b038         |   popl %ebx
  0x14b: b068         |   popl %esi
  0x14d: 2054         |   rrmovl %ebp, %esp
  0x14f: b058         |   popl %ebp
  0x151: 90           |   ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x152:              | End:
                      | #/* $end ncopy-ys */
                      | #################################################################### 
                      | # Epilogue code for the correctness testing driver
                      | ####################################################################
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x154:              | 	.align 4
  0x154: 00000000     | src:	.long 0
  0x158: 01000000     | 	.long 1
  0x15c: 02000000     | 	.long 2
  0x160: 03000000     | 	.long 3
  0x164: 04000000     | 	.long 4
  0x168: 05000000     | 	.long 5
  0x16c: 06000000     | 	.long 6
  0x170: 07000000     | 	.long 7
  0x174: 08000000     | 	.long 8
  0x178: 09000000     | 	.long 9
  0x17c: 0a000000     | 	.long 10
  0x180: 0b000000     | 	.long 11
  0x184: 0c000000     | 	.long 12
  0x188: 0d000000     | 	.long 13
  0x18c: 0e000000     | 	.long 14
  0x190: 0f000000     | 	.long 15
  0x194: 10000000     | 	.long 16
  0x198: 11000000     | 	.long 17
  0x19c: 12000000     | 	.long 18
  0x1a0: 13000000     | 	.long 19
  0x1a4: 14000000     | 	.long 20
  0x1a8: 15000000     | 	.long 21
  0x1ac: 16000000     | 	.long 22
  0x1b0: 17000000     | 	.long 23
  0x1b4: 18000000     | 	.long 24
  0x1b8: 19000000     | 	.long 25
  0x1bc: 1a000000     | 	.long 26
  0x1c0: 1b000000     | 	.long 27
  0x1c4: 1c000000     | 	.long 28
  0x1c8: 1d000000     | 	.long 29
  0x1cc: 1e000000     | 	.long 30
  0x1d0: 1f000000     | 	.long 31
  0x1d4: 20000000     | 	.long 32
  0x1d8: 21000000     | 	.long 33
  0x1dc: 22000000     | 	.long 34
  0x1e0: 23000000     | 	.long 35
  0x1e4: 24000000     | 	.long 36
  0x1e8: 25000000     | 	.long 37
  0x1ec: 26000000     | 	.long 38
  0x1f0: 27000000     | 	.long 39
  0x1f4: 28000000     | 	.long 40
  0x1f8: 29000000     | 	.long 41
  0x1fc: 2a000000     | 	.long 42
  0x200: 2b000000     | 	.long 43
  0x204: 2c000000     | 	.long 44
  0x208: 2d000000     | 	.long 45
  0x20c: 2e000000     | 	.long 46
  0x210: 2f000000     | 	.long 47
  0x214: 30000000     | 	.long 48
  0x218: 31000000     | 	.long 49
  0x21c: 32000000     | 	.long 50
  0x220: 33000000     | 	.long 51
  0x224: 34000000     | 	.long 52
  0x228: 35000000     | 	.long 53
  0x22c: 36000000     | 	.long 54
  0x230: 37000000     | 	.long 55
  0x234: 38000000     | 	.long 56
  0x238: 39000000     | 	.long 57
  0x23c: 3a000000     | 	.long 58
  0x240: 3b000000     | 	.long 59
  0x244: 3c000000     | 	.long 60
  0x248: 3d000000     | 	.long 61
  0x24c: 3e000000     | 	.long 62
  0x250: 3f000000     | 	.long 63
  0x254: 0f0f0f0f     |         .long 0x0f0f0f0f # This shouldn't get moved
                      | 
  0x260:              | 	.align 16
  0x260: efbe0000     | dest:	.long 0xbeef
  0x264: efbe0000     | 	.long 0xbeef
  0x268: efbe0000     | 	.long 0xbeef
  0x26c: efbe0000     | 	.long 0xbeef
  0x270: efbe0000     | 	.long 0xbeef
  0x274: efbe0000     | 	.long 0xbeef
  0x278: efbe0000     | 	.long 0xbeef
  0x27c: efbe0000     | 	.long 0xbeef
  0x280: efbe0000     | 	.long 0xbeef
  0x284: efbe0000     | 	.long 0xbeef
  0x288: efbe0000     | 	.long 0xbeef
  0x28c: efbe0000     | 	.long 0xbeef
  0x290: efbe0000     | 	.long 0xbeef
  0x294: efbe0000     | 	.long 0xbeef
  0x298: efbe0000     | 	.long 0xbeef
  0x29c: efbe0000     | 	.long 0xbeef
  0x2a0: efbe0000     | 	.long 0xbeef
  0x2a4: efbe0000     | 	.long 0xbeef
  0x2a8: efbe0000     | 	.long 0xbeef
  0x2ac: efbe0000     | 	.long 0xbeef
  0x2b0: efbe0000     | 	.long 0xbeef
  0x2b4: efbe0000     | 	.long 0xbeef
  0x2b8: efbe0000     | 	.long 0xbeef
  0x2bc: efbe0000     | 	.long 0xbeef
  0x2c0: efbe0000     | 	.long 0xbeef
  0x2c4: efbe0000     | 	.long 0xbeef
  0x2c8: efbe0000     | 	.long 0xbeef
  0x2cc: efbe0000     | 	.long 0xbeef
  0x2d0: efbe0000     | 	.long 0xbeef
  0x2d4: efbe0000     | 	.long 0xbeef
  0x2d8: efbe0000     | 	.long 0xbeef
  0x2dc: efbe0000     | 	.long 0xbeef
  0x2e0: efbe0000     | 	.long 0xbeef
  0x2e4: efbe0000     | 	.long 0xbeef
  0x2e8: efbe0000     | 	.long 0xbeef
  0x2ec: efbe0000     | 	.long 0xbeef
  0x2f0: efbe0000     | 	.long 0xbeef
  0x2f4: efbe0000     | 	.long 0xbeef
  0x2f8: efbe0000     | 	.long 0xbeef
  0x2fc: efbe0000     | 	.long 0xbeef
  0x300: efbe0000     | 	.long 0xbeef
  0x304: efbe0000     | 	.long 0xbeef
  0x308: efbe0000     | 	.long 0xbeef
  0x30c: efbe0000     | 	.long 0xbeef
  0x310: efbe0000     | 	.long 0xbeef
  0x314: efbe0000     | 	.long 0xbeef
  0x318: efbe0000     | 	.long 0xbeef
  0x31c: efbe0000     | 	.long 0xbeef
  0x320: efbe0000     | 	.long 0xbeef
  0x324: efbe0000     | 	.long 0xbeef
  0x328: efbe0000     | 	.long 0xbeef
  0x32c: efbe0000     | 	.long 0xbeef
  0x330: efbe0000     | 	.long 0xbeef
  0x334: efbe0000     | 	.long 0xbeef
  0x338: efbe0000     | 	.long 0xbeef
  0x33c: efbe0000     | 	.long 0xbeef
  0x340: efbe0000     | 	.long 0xbeef
  0x344: efbe0000     | 	.long 0xbeef
  0x348: efbe0000     | 	.long 0xbeef
  0x34c: efbe0000     | 	.long 0xbeef
  0x350: efbe0000     | 	.long 0xbeef
  0x354: efbe0000     | 	.long 0xbeef
  0x358: efbe0000     | 	.long 0xbeef
  0x35c: efbeadde     | 	.long 0xdeadbeef
                      | 
  0x360:              | .align 4
                      | # Run time stack
  0x360: 00000000     | 	.long 0
  0x364: 00000000     | 	.long 0
  0x368: 00000000     | 	.long 0
  0x36c: 00000000     | 	.long 0
  0x370: 00000000     | 	.long 0
  0x374: 00000000     | 	.long 0
  0x378: 00000000     | 	.long 0
  0x37c: 00000000     | 	.long 0
  0x380: 00000000     | 	.long 0
  0x384: 00000000     | 	.long 0
  0x388:              | Stack:
