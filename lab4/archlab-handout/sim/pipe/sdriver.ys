#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl 4, %eax		# src and dst have 4 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
#
# Kyle Weller
# clkrbj
# Used IADDL did not use IRMOVL
# Loop unrolling by a factor of 4 There are a sections at end to handle the leftover from the loops.
# alternated using esi and edi to avoid data dependencies and bubbles.
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:  pushl %ebp    # Save old frame pointer
  rrmovl %esp,%ebp  # Set up new frame pointer
  pushl %esi    # Save callee-save regs
  pushl %ebx
  pushl %edi
  mrmovl 8(%ebp),%ebx  # src
  mrmovl 12(%ebp),%ecx  # dst
  mrmovl 16(%ebp),%edx  # len

##################################################################
# You can modify this portion
  # Loop header
  xorl %eax,%eax    # count = 0;
  andl %edx, %edx
  jle Done
  iaddl $-4, %edx       # len = len - 4 
  jl Tail

Loop:  
  mrmovl (%ebx), %esi   # read val from src
  mrmovl 4(%ebx), %edi  # read val from src +4
  rmmovl %esi, (%ecx)   # store src[0] to dest[0]
  andl %esi, %esi       # src[0] > 0 
  jle Pos1              # yes ? goto pos1:
  iaddl $1, %eax        # count++

Pos1:
  rmmovl %edi, 4(%ecx)  # store src[1] in dest[1]
  andl %edi, %edi       # src[1] > 0 
  jle Pos2              # No ? get the next element
  iaddl $1, %eax        # count++
  
Pos2:
  mrmovl 8(%ebx), %esi    # read val from src +8
  mrmovl 12(%ebx), %edi   # read val from src +12
  rmmovl %esi, 8(%ecx)    # store src[2] in dest[2]
  andl %esi, %esi         # src[2] > 0 
  jle Pos3                # No ? get the next element
  iaddl $1, %eax          # count++
  
Pos3:
  rmmovl %edi, 12(%ecx)   # store src[3] in dest[3]
  andl %edi, %edi         # src[3] > 0 
  jle Next                # No ? get the next element
  iaddl $1, %eax          # count++

Next: 
  iaddl $16 , %ebx      # goto next four positions of src
  iaddl $16 , %ecx      # goto next four positions of dest
  iaddl $-4, %edx       # len = len - 4
  jge Loop              # if four left, do again

Tail:
  iaddl $4, %edx        # get actual len  
  
Extra1:
  iaddl $-1 , %edx
  jl Done                # Done
  mrmovl (%ebx), %esi    # Take care of extras here
  mrmovl 4(%ebx), %edi
  rmmovl %esi, (%ecx)
  andl %esi, %esi
  jle Extra2
  iaddl $1, %eax
  
Extra2:
  iaddl $-1 , %edx
  jl Done  
  rmmovl %edi, 4(%ecx)
  andl %edi, %edi
  jle Extra3
  iaddl $1, %eax

Extra3:
  iaddl $-1 , %edx
  jl Done
  mrmovl 8(%ebx), %esi
  rmmovl %esi, 8(%ecx)
  andl %esi, %esi
  jle Done
  iaddl $1, %eax  

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  popl %edi
  popl %ebx
  popl %esi
  rrmovl %ebp, %esp
  popl %ebp
  ret
##################################################################

#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

###############################
# Source and destination blocks 
###############################
	.align 4
src:	.long 0
	.long 1
	.long 2
	.long 3
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long 16
	.long 17
	.long 18
	.long 19
	.long 20
	.long 21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long 32
	.long 33
	.long 34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long 40
	.long 41
	.long 42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long 50
	.long 51
	.long 52
	.long 53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
        .long 0x0f0f0f0f # This shouldn't get moved

	.align 16
dest:	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xdeadbeef

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
Stack:
