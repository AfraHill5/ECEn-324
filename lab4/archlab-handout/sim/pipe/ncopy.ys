#/* $begin ncopy-ys */
# Kyle Weller
# clkrbj
# Used IADDL did not use IRMOVL
# Loop unrolling by a factor of 4 There are a sections at end to handle the leftover from the loops.
# alternated using esi and edi to avoid data dependencies and bubbles.
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:  pushl %ebp    # Save old frame pointer
  rrmovl %esp,%ebp  # Set up new frame pointer
  pushl %esi    # Save callee-save regs
  pushl %ebx
  pushl %edi
  mrmovl 8(%ebp),%ebx  # src
  mrmovl 16(%ebp),%edx  # len
  mrmovl 12(%ebp),%ecx  # dst

##################################################################
# You can modify this portion
  # Loop header
  xorl %eax,%eax    # count = 0;
  andl %edx, %edx
  jle Done
  iaddl $-4, %edx       # len = len - 4 
  jl tail

loop:  
  mrmovl (%ebx), %esi   # read val from src
  mrmovl 4(%ebx), %edi  # read val from src +4
  rmmovl %esi, (%ecx)   # store src[0] to dest[0]
  andl %esi, %esi       # src[0] > 0 
  jle pos1              # yes ? goto pos1:
  iaddl $1, %eax        # count++

pos1:
  rmmovl %edi, 4(%ecx)  # store src[1] in dest[1]
  andl %edi, %edi       # src[1] > 0 
  jle pos2              # No ? get the next element
  iaddl $1, %eax        # count++
  
pos2:
  mrmovl 8(%ebx), %esi    # read val from src +8
  mrmovl 12(%ebx), %edi   # read val from src +12
  rmmovl %esi, 8(%ecx)    # store src[2] in dest[2]
  andl %esi, %esi         # src[2] > 0 
  jle pos3                # No ? get the next element
  iaddl $1, %eax          # count++
  
pos3:
  rmmovl %edi, 12(%ecx)   # store src[3] in dest[3]
  andl %edi, %edi         # src[3] > 0 
  jle next                # No ? get the next element
  iaddl $1, %eax          # count++

next: 
  iaddl $16 , %ebx      # goto next four positions of src
  iaddl $16 , %ecx      # goto next four positions of dest
  iaddl $-4, %edx       # len = len - 4
  jge loop              # if four left, do again

tail:
  iaddl $4, %edx        # get actual len  
  
extra1:
  iaddl $-1 , %edx
  jl Done                # Done
  mrmovl (%ebx), %esi    # Take care of extras here
  mrmovl 4(%ebx), %edi
  rmmovl %esi, (%ecx)
  andl %esi, %esi
  jle extra2
  iaddl $1, %eax
  
extra2:
  iaddl $-1 , %edx
  jl Done  
  rmmovl %edi, 4(%ecx)
  andl %edi, %edi
  jle extra3
  iaddl $1, %eax

extra3:
  iaddl $-1 , %edx
  jl Done
  mrmovl 8(%ebx), %esi
  rmmovl %esi, 8(%ecx)
  andl %esi, %esi
  jle Done
  iaddl $1, %eax  

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  popl %edi               # Restore callee-save registers
  popl %ebx
  popl %esi
  rrmovl %ebp, %esp
  popl %ebp
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
